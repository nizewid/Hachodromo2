@page "/sites"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (sites is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="sites">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-list"></i> Sitios
                        <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Añadir Sitio</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Sitio..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Descripcion</th>
                                <th>Ciudad</th>
                                <th>Teléfono</th>
                                <th>Targets</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var site in sites)
                            { 
                                <tr>
                                    <td>
                                        @site.Name
                                    </td>
                                    <td>
                                        @site.Description
                                    </td>
                                    <td>
										@site.City!.CityName 
                                    </td>
                                    <td>
                                        @site.Phone
                                    </td>
                                    <td>
                                        @site.TargetsCount!.Value
                                     </td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="() => ShowModal(site.Id, true)">
                                            <i class="oi oi-pencil"></i> Editar
                                        </button>
                                        <!-- <button class="btn btn-danger" @onclick=@(() => Delete(site.Id))><i class="oi oi-trash" /> Borrar</button>-->
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    public List<Site>? sites { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/sites?page={page}";
            url2 = $"api/sites/totalPages";
        }
        else
        {
            url1 = $"api/sites?page={page}&filter={Filter}";
            url2 = $"api/sites/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Site>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            sites = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int siteId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/sites/{siteId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;
        if (isEdit)
        {
           modalReference = Modal.Show<SiteEdit>($"Editar Local", new ModalParameters().Add("SiteId", id));
        }
        else
        {
            modalReference = Modal.Show<SiteCreate>($"Crear Local");
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}
