<Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
	<Authorized>
		<a href="logout" class="nav-link btn btn-link">Cerrar sesión</a>
		<span><a href="EditUser" class="nav-link btn-link"> @context.User.Identity!.Name</a></span>
		@if (!string.IsNullOrEmpty(photoUser))
		{
			<div class="mx-2">
				<img src="@photoUser" width="50" height="50" style="border-radius:50%" />
			</div>
		}
	</Authorized>
	<NotAuthorized>
		<a href="login" class="nav-link btn btn-link">Iniciar sesión</a>
		<a href="register" class="nav-link btn btn-link">Registrarse</a>
	</NotAuthorized>
</Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

@code {
	private string? photoUser;

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

	protected async override Task OnParametersSetAsync()
	{
		var authenticationState = await authenticationStateTask;
		var claims = authenticationState.User.Claims.ToList();
		var photoClaim = claims.FirstOrDefault(x => x.Type == "Photo");
		if (photoClaim is not null)
		{
			photoUser = photoClaim.Value;
		}
	}
}
