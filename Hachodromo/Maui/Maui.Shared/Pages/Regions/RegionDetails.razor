@page "/region/details/{RegionId:int}"
@inject IRepository repository
@inject INativeDialogService dialogService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Regiones</h3>

@if (region is null)
{
	<div class="spinner" />
}
else
{
	<div class="card">
		<div class="card-body">
			<h5 class="card-title">Detalles de región @region.RegionName</h5>
			<p class="card-text">Id: @region.RegionId</p>
			<p class="card-text">Ciudades: @region.CityNumber</p>
			<div class="mb-2">
				<a class="btn btn-primary" @onclick=@(()=>ShowModal())>Nueva Ciudad</a>
				<a class="btn btn-success" href="/countries/details/@region.CountryId">Regresar</a>
			</div>
		</div>
	</div>
	<div class="mb-2" style="display:flex; flex-wrap:wrap; align-items: center">
		<div class="mx-2">
			<input style="widh: 200px" type="type" class="form-control" id="titulo" placeHolder="Buscar..." @bind-value="Filter" />
		</div>
		<div>
			<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
			<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
		</div>
	</div>
	<Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />
	<GenericList MyList="cities">
		<Loading>
			<div class="spinner" />
		</Loading>
		<Body>
			<table class="table table-striped">
				<thead>
					<tr>
						<th>Ciudad</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var city in cities!)
					{
						<tr>
							<td>@city.CityName</td>
							<td>
							<a class="btn btn-warning" @onclick=@(() => ShowModal(city.CityId,true))>Editar</a>
							<button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.CityId))>Eliminar</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</Body>
	</GenericList>
}

@code {
	private Region? region;
	private List<City>? cities;
	private int currentPage = 1;
	private int totalPages;

	[Parameter]
	public int RegionId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string Page { get; set; } = string.Empty;

	[Parameter]
	[SupplyParameterFromQuery]
	public string Filter { get; set; } = string.Empty;

	[CascadingParameter]
	IModalService Modal { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task SelectedPageAsync(int page)
	{
		currentPage = page;
		await LoadAsync(page);
	}

	private async Task LoadAsync(int page = 1)
	{
		string url1, url2 = string.Empty;

		if (!string.IsNullOrWhiteSpace(Page))
		{
			page = Convert.ToInt32(Page);
		}

		if (string.IsNullOrEmpty(Filter))
		{
			url1 = $"/api/cities?id={RegionId}&page={page}";
			url2 = $"/api/cities/totalPages?id={RegionId}";
		}
		else
		{
			url1 = $"/api/cities?id={RegionId}&page={page}&filter={Filter}";
			url2 = $"/api/cities/totalPages?id={RegionId}&filter={Filter}";
		}
		var responseHttp1 = await repository.Get<Region>($"/api/regions/{RegionId}");
		var responseHttp2 = await repository.Get<List<City>>(url1);
		var responseHttp3 = await repository.Get<int>(url2);

		if (responseHttp1.Error)
		{
			if (responseHttp1.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/countries");
				return;
			}
			var message = await responseHttp1.GetErrorMessageAsync();
			await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
			return;
		}
		region = responseHttp1.Response;
		cities = responseHttp2.Response;
		totalPages = responseHttp3.Response;
	}


	private async Task DeleteAsync(int id)
	{
		var confirm = await dialogService.ShowConfirmMessageAsync("Confirmación", "¿Está seguro de que desea eliminar esta ciudad?");
		if (!confirm)
		{
			return;
		}
		var responseHttp = await repository.Delete($"/api/cities/{id}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHttp.GetErrorMessageAsync();
				await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
				return;
			}
		}
		await LoadAsync();
	}
	private async Task CleanFilterAsync()
	{
		Filter = string.Empty;
		await ApplyFilterAsync();
	}

	private async Task ApplyFilterAsync()
	{
		int page = 1;
		await LoadAsync(page);
		await SelectedPageAsync(page);
	}
	private async Task ShowModal(int cityId = 0, bool isEdit = false)
	{
		IModalReference modalReference;

		if (isEdit)
		{
			modalReference = Modal.Show<CitiesEdit>("Editar Ciudad", new ModalParameters().Add("CityId", cityId));
		}
		else
		{
			var parameters = new ModalParameters();
			parameters.Add("RegionId", region!.RegionId); // usa RegionId directamente
			modalReference = Modal.Show<CityCreate>("Crear Ciudad", parameters);
		}

		var result = await modalReference.Result;
		if (result.Confirmed)
		{
			await LoadAsync();
		}
	}


}
