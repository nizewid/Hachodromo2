@using Microsoft.AspNetCore.Components.Forms
@inject INativeDialogService dialogService
@attribute [Authorize(Roles= "Admin")]

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>
<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <div>
            <label>Ingrese el nombre de la ciudad:</label>
            <InputText class="form-control" @bind-Value="@City.CityName" />
            <ValidationMessage For="@(() => City.CityName)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public City City{ get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<City> OnValidSubmit { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(City);
    }
    private async Task HandleValidSubmit()
    {
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(City);
        }

        FormPostedSuccessfully = true;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();

        if (!formWasModified || FormPostedSuccessfully)
            return;

        var confirmed = await dialogService.ShowConfirmMessageAsync(
            "¿Está seguro de que desea salir?",
            "Los cambios no guardados se perderán."
        );

        if (!confirmed)
        {
            context.PreventNavigation(); // Solo prevenir si NO confirmó
        }
    }

}
