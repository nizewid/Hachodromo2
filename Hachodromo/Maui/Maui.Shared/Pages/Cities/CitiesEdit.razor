@inject IRepository repository
@inject INativeDialogService dialogService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles= "Admin")]

<h3>Editar Ciudad</h3>

@if (city is null)
{
	<div class="spinner" />
}
else
{
	<CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return"/>
}

@code {
	private City? city;
	private CityForm? cityForm;

	[CascadingParameter]
	BlazoredModalInstance BlazoredModal { get; set; } = default!; 

	[Parameter]
	public int CityId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var responseHttp = await repository.Get<City>($"/api/cities/{CityId}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				await dialogService.ShowAlertAsync("Error", "Ciudad no encontrada", "Aceptar");
				navigationManager.NavigateTo("/countries");
				return;
			}

			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
			return;
		}
		city = responseHttp.Response;
	}
	private async Task EditAsync()
	{
		var responseHttp = await repository.Put<City>($"/api/cities", city!);
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
			return;
		}
		await BlazoredModal.CloseAsync(ModalResult.Ok());
		Return();
	}
	private void Return()
	{
		cityForm!.FormPostedSuccessfully = true;
		navigationManager.NavigateTo($"/region/details/{city!.RegionId}");
	}
}
