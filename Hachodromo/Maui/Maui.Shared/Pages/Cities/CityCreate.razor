@inject IRepository repository
@inject NavigationManager NavigationManager
@inject INativeDialogService dialogService
@attribute [Authorize(Roles = "Admin")]

<h3>Crear Ciudad para la región: @region?.RegionName</h3>
<CityForm @ref="cityForm" City="city" OnValidSubmit="Create" ReturnAction="Return"/>

@code {
	private City city= new City {CityName = string.Empty };
	private CityForm? cityForm;
	private Region? region;

	[Parameter]
	public int RegionId { get; set; }

	[CascadingParameter]
	BlazoredModalInstance BlazoredModal { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		await LoadRegion();
	}

	private async Task Create()
	{
		city.RegionId = RegionId;
		var httpResponse = await repository.Post<City>("/api/cities", city);
		if (httpResponse.Error){
			var message = await httpResponse.GetErrorMessageAsync();
			await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
			return;
		}
		await BlazoredModal.CloseAsync(ModalResult.Ok());
		Return();
	}
	private void Return()
	{
		cityForm!.FormPostedSuccessfully = true;
		NavigationManager.NavigateTo($"/region/details/{RegionId}");
	}

	private async Task LoadRegion()
	{
		var response = await repository.Get<Region>($"/api/regions/{RegionId}");
		if (!response.Error)
		{
			region = response.Response;
		}
		else
		{
			var message = await response.GetErrorMessageAsync();
			await dialogService.ShowAlertAsync("Error", message ?? "Ocurrió un error desconocido", "Aceptar");
			NavigationManager.NavigateTo("/countries");
		}
	}
}
