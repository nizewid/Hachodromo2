@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Site:</label>
        <div>
            <InputText class="form-control" @bind-Value="@SiteDto.Name" />
            <ValidationMessage For="@(() => SiteDto.Name)" />
        </div>
        <div>
			<label>Descripción:</label>
            <InputTextArea class="form-control" @bind-Value="@SiteDto.Description" />
            <ValidationMessage For="@(() => SiteDto.Description)" />
        </div>
        <div>
			<label>Teléfono:</label>
            <InputText class="form-control" @bind-Value="@SiteDto.Phone" />
            <ValidationMessage For="@(() => SiteDto.Phone)" />
        </div>
        <div>
            <label>Dirección</label>
            <InputText class="form-control" @bind-Value="@SiteDto.Address" />
            <ValidationMessage For="@(() => SiteDto.Address)" />
        </div>
        <div>
            <label>Cantidad de Dianas</label>
            <InputNumber class="form-control" @bind-Value="@SiteDto.TargetsToCreate" />
            <ValidationMessage For="@(() => SiteDto.TargetsToCreate)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public SiteDto SiteDto { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(SiteDto);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
