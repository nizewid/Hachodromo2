@page "/sites/edit/{SiteId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Local</h3>

@if (siteDto is null)
{
    <div class="spinner" />
}
else
{
    <SiteForm @ref="siteForm" SiteDto="siteDto" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private SiteDto? siteDto;
    private SiteForm? siteForm;

    [Parameter]
    public int SiteId { get; set; }

    [CascadingParameter]
	BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<SiteDto>($"/api/sites/{SiteId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/sites");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        siteDto = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/sites", siteDto);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
		await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        siteForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/sites");
    }
}
