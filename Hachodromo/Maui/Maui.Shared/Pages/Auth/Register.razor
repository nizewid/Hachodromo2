@page "/Register"
@inject IRepository repository
@inject INativeDialogService dialogService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="userDto" OnValidSubmit="CreteUserAsync">
	<DataAnnotationsValidator />
	<div class="card shadow rounded-4 bg-light border-0 my-5">
		<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center rounded-top-4">
			<h5 class="mb-0">
				<i class="bi bi-person-fill me-2"></i> Registro de Usuario
			</h5>
		</div>
		<div class="card-body p-4">
			<div class="row">
				<div class="col-12 col-lg-6">
					@* Primera columna *@
					<div class="mb-3">
						<label class="form-label">Nombres</label>
						<InputText class="form-control" @bind-Value="userDto.FirstName" />
						<ValidationMessage For="@(() => userDto.FirstName)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Apellidos</label>
						<InputText class="form-control" @bind-Value="userDto.LastName" />
						<ValidationMessage For="@(() => userDto.LastName)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Documento</label>
						<InputText class="form-control" @bind-Value="userDto.Document" />
						<ValidationMessage For="@(() => userDto.Document)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Fecha de nacimiento</label>
						<InputDate class="form-control" @bind-Value="userDto.BornDate" />
						<ValidationMessage For="@(() => userDto.BornDate)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Teléfono</label>
						<InputText class="form-control" @bind-Value="userDto.PhoneNumber" />
						<ValidationMessage For="@(() => userDto.PhoneNumber)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Dirección</label>
						<InputText class="form-control" @bind-Value="userDto.Address" />
						<ValidationMessage For="@(() => userDto.Address)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Email</label>
						<InputText class="form-control" @bind-Value="userDto.Email" />
						<ValidationMessage For="@(() => userDto.Email)" />
					</div>
				</div>
				<div class="col-12 col-lg-6">
					@* Segunda columna *@
					@if (IsAdmin)
					{
						<div class="mb-3">
							<label class="form-label">Tipo de usuario</label>
							<select class="form-select" @bind="userDto.UserType">
								<option value="@UserType.User">Usuario</option>
								<option value="@UserType.Admin">Administrador</option>
							</select>
						</div>
						<div class="mb-3">
							<label class="form-label">Membresía</label>
							<select class="form-select" @bind="userDto.MembershipId">
								<option value="0">Seleccione una membresía</option>
								@if (memberships is not null)
								{
									@foreach (var membership in memberships)
									{
										<option value="@membership.Id">@membership.Name</option>
									}
								}
							</select>
						</div>
					}
					<div class="mb-3">
						<label class="form-label">País</label>
						<select class="form-select" @onchange="CountryChangedAsync">
							<option value="0">Seleccione un país</option>
							@if (countries is not null)
							{
								@foreach (var country in countries)
								{
									<option value="@country.Id">@country.Name</option>
								}
							}
						</select>
					</div>
					<div class="mb-3">
						<label class="form-label">C/A ó Región</label>
						<select class="form-select" @onchange="RegionChangedAsync">
							<option value="0">Seleccione una región</option>
							@if (regions is not null)
							{
								@foreach (var region in regions)
								{
									<option value="@region.RegionId">@region.RegionName</option>
								}
							}
						</select>
					</div>
					<div class="mb-3">
						<label class="form-label">Ciudad</label>
						<select class="form-select" @bind="userDto.CityId">
							<option value="0">Seleccione una ciudad</option>
							@if (cities is not null)
							{
								@foreach (var city in cities)
								{
									<option value="@city.CityId">@city.CityName</option>
								}
							}
						</select>
					</div>
					<div class="mb-3">
						<InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
					</div>
					<div class="mb-3">
						<label class="form-label">Contraseña</label>
						<InputText type="password" class="form-control" @bind-Value="userDto.Password" />
						<ValidationMessage For="@(() => userDto.Password)" />
					</div>
					<div class="mb-3">
						<label class="form-label">Confirmación de contraseña</label>
						<InputText type="password" class="form-control" @bind-Value="userDto.ConfirmPassword" />
						<ValidationMessage For="@(() => userDto.ConfirmPassword)" />
					</div>

				</div>
			</div>
			<div class="text-center mt-4">
				<button class="btn btn-success px-5" type="submit">Registrar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	private UserDto userDto = new();
	private List<Country>? countries;
	private List<Region>? regions;
	private List<City>? cities;
	private List<Membership>? memberships;
	private string? imageUrl;

	[Parameter]
	[SupplyParameterFromQuery]
	public bool IsAdmin { get; set; }



	protected override async Task OnInitializedAsync()
	{
		await LoadCountriesAsync();


		if (!string.IsNullOrEmpty(userDto.Photo))
		{
			imageUrl = userDto.Photo;
			userDto.Photo = null;
		}
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			// Revisa si tiene el rol "Admin"
			IsAdmin = user.IsInRole("Admin");
		}
		if (IsAdmin)
		{
			await LoadMembershipsAsync();
		}
		else
		{
			userDto.MembershipId = (int?)MembershipType.NoMembership;
		}

	}
	private void ImageSelected(string imagenBase64)
	{
		userDto.Photo = imagenBase64;
		imageUrl = null;
	}

	private async Task CreteUserAsync()
	{
		//loading = true;
		userDto.UserName = userDto.Email;
		if (!IsAdmin)
		{
			userDto.UserType = UserType.User;
		}

		var responseHttp = await repository.Post<UserDto>("/api/accounts/CreateUser", userDto);
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowInfoAsync("Error", message!, "Aceptar");
			return;
		}

		await dialogService.ShowInfoAsync("Éxito", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", "Aceptar");
		await dialogService.ShowToastAsync("Verifica tu correo", ToastType.Success);
		//await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", SweetAlertIcon.Info);

		navigationManager.NavigateTo("/");
	}

	private async Task CountryChangedAsync(ChangeEventArgs e)
	{
		var selectedCountry = Convert.ToInt32(e.Value!);
		await LoadRegionsAsync(selectedCountry);
	}


	private async Task RegionChangedAsync(ChangeEventArgs e)
	{
		var selectedRegion = Convert.ToInt32(e.Value!);
		await LoadCitiesAsync(selectedRegion);
	}

	private async Task LoadMembershipsAsync()
	{
		var responseHttp = await repository.Get<List<Membership>>("/api/memberships/");
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowInfoAsync("Error", message!, "Aceptar");
			//await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}
		memberships = responseHttp.Response;
	}

	private async Task LoadCountriesAsync()
	{
		var responseHttp = await repository.Get<List<Country>>("/api/countries/combo");
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowInfoAsync("Error", message!, "Aceptar");

			return;
		}
		countries = responseHttp.Response;
	}
	private async Task LoadRegionsAsync(int countryId)
	{
		var responseHttp = await repository.Get<List<Region>>($"/api/regions/combo/{countryId}");
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowInfoAsync("Error", message!, "Aceptar");

			return;
		}
		regions = responseHttp.Response;
	}
	private async Task LoadCitiesAsync(int regionId)
	{
		var responseHttp = await repository.Get<List<City>>($"/api/cities/combo/{regionId}");
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await dialogService.ShowInfoAsync("Error", message!, "Aceptar");
			//await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}
		cities = responseHttp.Response;
	}
}
