@page "/Login"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject INativeDialogService dialogService
@inject ILogService log

<EditForm Model="loginDto" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="row justify-content-center">
            <!-- 100 % en XS, 75 % en SM, 50 % en MD, 33 % en LG+ -->
            <div class="col-12 col-sm-9 col-md-6 col-lg-4">
                <div class="card shadow rounded-4 p-3">

                    <div class="card-body">
                        <h5 class="card-title text-center mb-4">Iniciar Sesión</h5>

                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText class="form-control" @bind-Value="loginDto.Email" />
                            <ValidationMessage For="@(() => loginDto.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña:</label>
                            <InputText type="password" class="form-control" @bind-Value="loginDto.Password" />
                            <ValidationMessage For="@(() => loginDto.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" type="submit">Entrar</button>
                        </div>
                    </div>

                    <div class="card-footer bg-white border-0">
                        <div class="text-center small">
                            <p class="mb-1">
                                ¿No tienes una cuenta?
                                <a href="/Register">Regístrate</a>
                            </p>
                            <p class="mb-1">
                                ¿Olvidaste tu contraseña?
                                <a href="/ForgotPassword">Recuperar contraseña</a>
                            </p>
                            <p class="mb-0">
                                Reenviar correo de reactivación
                                <a href="/ResendToken">Enviar reactivación</a>
                            </p>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</EditForm>

@*if (!string.IsNullOrEmpty(log.Estado))
{
    <div class="alert alert-secondary mt-2 text-center">
        <strong>@log.Estado</strong>
    </div>
}*@

@code {
    private LoginDto loginDto = new();

    private async Task LoginAsync()
    {
        log.Info("Entrando en LoginAsync");

        try
        {
            var responseHttp = await repository.Post<LoginDto, TokenDto>("/api/accounts/Login", loginDto);

            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                log.Info("Login fallido: " + message);

                await dialogService.ShowAlertAsync("Error", message, "Aceptar");
                return;
            }

            log.Info("Login exitoso");
            await loginService.LoginAsync(responseHttp.Response!.Token);
            navigationManager.NavigateTo("/");
			await dialogService.ShowToastAsync("Bienvenido", ToastType.Success);
        }
        catch (Exception ex)
        {
            log.Info("Excepción: " + ex.Message);
            await dialogService.ShowAlertAsync("Error", "Error inesperado", "Aceptar");
        }
    }
}
