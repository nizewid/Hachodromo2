@using Hachodromo.Shared.DTOs
@inject INativeDialogService dialogService

<MudPaper Class="pa-6 mud-width-full" Elevation="8" Style="border-radius: 16px;">

<MudStack Spacing="1" AlignItems="AlignItems.Center" Class="mb-4">
    <MudText Typo="Typo.subtitle1">
        Confirmar reserva
    </MudText>
    <MudText Typo="Typo.body1">
            @Model.ReservationDate.ToString("dd/MM/yyyy")
    </MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary">
            @Model.HourStart.ToString(@"hh\:mm") - @Model.HourEnd.ToString(@"hh\:mm")
    </MudText>
</MudStack>


    <CascadingValue Value="editContext">
        <MudForm @ref="mudForm" Model="Model">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <MudGrid Gutter="3">
                <!-- Correo -->
                <MudItem xs="12">
                    <MudTextField T="string" Label="Correo electrónico"
                                  For="() => Model.Email"
                                  @bind-Value="Model.Email"
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email" />
                </MudItem>

                <!-- Personas -->
                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Cantidad de personas"
                                     For="() => Model.PersonCount"
                                     @bind-Value="Model.PersonCount"
                                     Min="1" Max="10"
                                     Required="true"
                                     Variant="Variant.Outlined"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.Groups" />
                </MudItem>

                <!-- Observaciones -->
                <MudItem xs="12">
                    <MudTextField T="string" Label="Observaciones"
                                  @bind-Value="Model.Remarks"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Comment" />
                </MudItem>
            </MudGrid>

            <!-- Botones -->
            <MudDivider Class="my-4" />

            <MudStack Direction="Row" Justify="Justify.FlexEnd" Spacing="2">
                <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Close">
                    Cancelar
                </MudButton>
                <MudButton OnClick="SubmitForm" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check">
                    Confirmar
                </MudButton>
            </MudStack>
        </MudForm>
    </CascadingValue>

</MudPaper>


@code {
    private MudForm mudForm = default!;
    private EditContext editContext = default!;

    [Parameter] public ReservationDto Model { get; set; } = new();
    [Parameter] public EventCallback<ReservationDto> OnValidSubmit { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }


    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
    }

    private async Task SubmitForm()
    {
        await mudForm.Validate();
        if (!mudForm.IsValid)
            return;

        await OnValidSubmit.InvokeAsync(Model);

        if (MudDialog != null)
            MudDialog.Close(DialogResult.Ok(true));
        else
            await dialogService.ShowToastAsync("Reserva enviada correctamente", ToastType.Success);
    }


    private void Cancel()
    {
        MudDialog?.Cancel(); // Cancela el modal
    }
}
