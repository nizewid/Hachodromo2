@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Registrar Nuevo Usuario</h3>

<EditForm Model="userDto" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>Nombres:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.FirstName" />
                    <ValidationMessage For="@(() => userDto.FirstName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Apellidos:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.LastName" />
                    <ValidationMessage For="@(() => userDto.LastName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Documento:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.Document" />
                    <ValidationMessage For="@(() => userDto.Document)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Fecha de nacimiento:</label>
                <div>
                    <InputDate class="form-control" @bind-Value="@userDto.BornDate" />
                    <ValidationMessage For="@(() => userDto.BornDate)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Teléfono:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.PhoneNumber" />
                    <ValidationMessage For="@(() => userDto.PhoneNumber)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Dirección:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.Address" />
                    <ValidationMessage For="@(() => userDto.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.Email" />
                    <ValidationMessage For="@(() => userDto.Email)" />
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <label>Ciudad:</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@userDto.CityId" />
                    <ValidationMessage For="@(() => userDto.CityId)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Foto:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDto.Photo" />
                    <ValidationMessage For="@(() => userDto.Photo)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDto.Password" />
                    <ValidationMessage For="@(() => userDto.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Confirmación de contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDto.ConfirmPassword" />
                    <ValidationMessage For="@(() => userDto.ConfirmPassword)" />
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Registrar</button>
</EditForm>

@code {
    private UserDto userDto = new();

    private async Task CreteUserAsync()
    {
        userDto.UserName = userDto.Email;
        userDto.UserType = UserType.User;
        var responseHttp = await repository.Post<UserDto, TokenDto>("/api/accounts/CreateUser", userDto);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
