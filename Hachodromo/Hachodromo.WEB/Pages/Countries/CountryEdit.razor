@page "/countries/edit/{id:int}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Editar País</h3>

@if (country is null)
{
	<p>Cargando...</p>
}
else
{
	<CountryForm @ref="countryForm" Country="country" OnValidSubmit="EditAsync" ReturnAction="Return"/>
}
@code {
	private Country? country;
	private CountryForm? countryForm;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				await sweetAlertService.FireAsync("Error", "El país no existe");
				navigationManager.NavigateTo("/countries");
				return;
			}

			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}
		country = responseHttp.Response;
	}

	private async Task EditAsync()
	{
		var responseHttp = await repository.Put<Country>($"/api/countries/", country!);
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}
		Return();
	}
	private void Return()
	{
		countryForm!.FormPostedSuccessfully = true;
		navigationManager.NavigateTo("/countries");
	}
}
