@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles= "Admin")]

<h3>Paises</h3>
<div class="mb-2" style="display:flex; flex-wrap:wrap; align-items: center">
	<div>
		<a class="btn btn-primary mb-3" href="/countries/create">Crear País</a>
	</div>
	<div class="mx-2">
		<input style="widh: 300px" type="type" class="form-control" id="titulo" placeHolder="Buscar..." @bind-value="Filter"/>
	</div>
	<div>
		<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
		<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
	</div>
</div>

<Pagination CurrentPage="currentPage"
TotalPages="totalPages"
SelectedPage="SelectedPageAsync" />

<GenericList MyList="Countries">
	<Loading>
		<p>Cargando...</p>
	</Loading>
	<Body>
		<table class="table table-striped">
			<thead>
				<th>id</th>
				<th>Nombre</th>
				<th>Provincias</th>
				<th>Acciones</th>
			</thead>
			<tbody>
				@foreach (var country in Countries!)
				{
					<tr>
						<td>@country.Id</td>
						<td>@country.Name</td>
						<td>@country.RegionNumber</td>
						<a class="btn btn-light" href="/countries/details/@country.Id">Detalles</a>
						<a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
						<button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id)) >Eliminar</button>
					</tr>
				}
			</tbody>
		</table>
	</Body>
</GenericList>
@code {
	public List<Country>? Countries { get; set; }
	private int currentPage = 1;
	private int totalPages = 10;

	[Parameter]
	[SupplyParameterFromQuery]
	public string Page { get; set; } = string.Empty;

	[Parameter]
	[SupplyParameterFromQuery]
	public string Filter { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task LoadAsync(int page = 1)
	{
		string url1, url2 = string.Empty;
		if (!string.IsNullOrWhiteSpace(Page))
		{
			page = Convert.ToInt32(Page);
		}

		if (string.IsNullOrWhiteSpace(Filter))
		{
			url1 = $"/api/countries?page={page}";
			url2 = $"/api/countries/totalPages";
		}
		else{
			url1 = $"/api/countries?page={page}&filter={Filter}";
			url2 = $"/api/countries/totalPages?filter={Filter}";
		}
		var responseHttp = await repository.Get<List<Country>>(url1);
		var responseHttp2 = await repository.Get<int>(url2);
		Countries = responseHttp.Response!;
		totalPages = responseHttp2.Response!;
	}

	private async Task SelectedPageAsync(int page)
	{
		currentPage = page;
		await LoadAsync(page);
	}

	private async Task DeleteAsync(int id)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmación",
				Text = "¿Deseas eliminar el país?",
				Icon = SweetAlertIcon.Question,
				ShowCancelButton = true,
				CancelButtonText = "NO",
				ConfirmButtonText = "SI"
			});
		var confirm = string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return;
		}
		var responseHttp = await repository.Delete($"/api/countries/{id}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHttp.GetErrorMessageAsync();
				await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
				return;
			}
		}
		await LoadAsync();
	}
	private async Task CleanFilterAsync()
	{
		Filter = string.Empty;
		await ApplyFilterAsync();
	}

	private async Task ApplyFilterAsync()
	{
		int page = 1;
		await LoadAsync(page);
		await SelectedPageAsync(page);
	}
}
